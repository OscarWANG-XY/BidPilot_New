/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProjectsImport } from './routes/projects'
import { Route as ChatImport } from './routes/chat'
import { Route as ProjectsIdImport } from './routes/projects.$id'
import { Route as ChatSessionIdImport } from './routes/chat.$sessionId'
import { Route as AuthServiceTermImport } from './routes/auth/service-term'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthPrivacyPolicyImport } from './routes/auth/privacy-policy'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AuthForgotPasswordImport } from './routes/auth/forgot-password'
import { Route as ProjectsIdIndexImport } from './routes/projects.$id.index'
import { Route as ProjectsIdNewImport } from './routes/projects.$id.new'
import { Route as ProjectsIdPhasesPhaseIdImport } from './routes/projects.$id.phases.$phaseId'
import { Route as ProjectsIdPhasesPhaseIdViewModeImport } from './routes/projects.$id.phases.$phaseId.$viewMode'

// Create Virtual Routes

const ProjectsmanagerLazyImport = createFileRoute('/projects_manager')()
const FilesmanagerLazyImport = createFileRoute('/files_manager')()
const CompanyLazyImport = createFileRoute('/company')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const ProjectsmanagerLazyRoute = ProjectsmanagerLazyImport.update({
  id: '/projects_manager',
  path: '/projects_manager',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/projects_manager.lazy').then((d) => d.Route),
)

const FilesmanagerLazyRoute = FilesmanagerLazyImport.update({
  id: '/files_manager',
  path: '/files_manager',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/files_manager.lazy').then((d) => d.Route))

const CompanyLazyRoute = CompanyLazyImport.update({
  id: '/company',
  path: '/company',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/company.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const ProjectsRoute = ProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRoute,
} as any)

const ChatRoute = ChatImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProjectsIdRoute = ProjectsIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ProjectsRoute,
} as any)

const ChatSessionIdRoute = ChatSessionIdImport.update({
  id: '/$sessionId',
  path: '/$sessionId',
  getParentRoute: () => ChatRoute,
} as any)

const AuthServiceTermRoute = AuthServiceTermImport.update({
  id: '/auth/service-term',
  path: '/auth/service-term',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthPrivacyPolicyRoute = AuthPrivacyPolicyImport.update({
  id: '/auth/privacy-policy',
  path: '/auth/privacy-policy',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/auth/forgot-password',
  path: '/auth/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsIdIndexRoute = ProjectsIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProjectsIdRoute,
} as any)

const ProjectsIdNewRoute = ProjectsIdNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => ProjectsIdRoute,
} as any)

const ProjectsIdPhasesPhaseIdRoute = ProjectsIdPhasesPhaseIdImport.update({
  id: '/phases/$phaseId',
  path: '/phases/$phaseId',
  getParentRoute: () => ProjectsIdRoute,
} as any)

const ProjectsIdPhasesPhaseIdViewModeRoute =
  ProjectsIdPhasesPhaseIdViewModeImport.update({
    id: '/$viewMode',
    path: '/$viewMode',
    getParentRoute: () => ProjectsIdPhasesPhaseIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatImport
      parentRoute: typeof rootRoute
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/company': {
      id: '/company'
      path: '/company'
      fullPath: '/company'
      preLoaderRoute: typeof CompanyLazyImport
      parentRoute: typeof rootRoute
    }
    '/files_manager': {
      id: '/files_manager'
      path: '/files_manager'
      fullPath: '/files_manager'
      preLoaderRoute: typeof FilesmanagerLazyImport
      parentRoute: typeof rootRoute
    }
    '/projects_manager': {
      id: '/projects_manager'
      path: '/projects_manager'
      fullPath: '/projects_manager'
      preLoaderRoute: typeof ProjectsmanagerLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/auth/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/privacy-policy': {
      id: '/auth/privacy-policy'
      path: '/auth/privacy-policy'
      fullPath: '/auth/privacy-policy'
      preLoaderRoute: typeof AuthPrivacyPolicyImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/auth/service-term': {
      id: '/auth/service-term'
      path: '/auth/service-term'
      fullPath: '/auth/service-term'
      preLoaderRoute: typeof AuthServiceTermImport
      parentRoute: typeof rootRoute
    }
    '/chat/$sessionId': {
      id: '/chat/$sessionId'
      path: '/$sessionId'
      fullPath: '/chat/$sessionId'
      preLoaderRoute: typeof ChatSessionIdImport
      parentRoute: typeof ChatImport
    }
    '/projects/$id': {
      id: '/projects/$id'
      path: '/$id'
      fullPath: '/projects/$id'
      preLoaderRoute: typeof ProjectsIdImport
      parentRoute: typeof ProjectsImport
    }
    '/projects/$id/new': {
      id: '/projects/$id/new'
      path: '/new'
      fullPath: '/projects/$id/new'
      preLoaderRoute: typeof ProjectsIdNewImport
      parentRoute: typeof ProjectsIdImport
    }
    '/projects/$id/': {
      id: '/projects/$id/'
      path: '/'
      fullPath: '/projects/$id/'
      preLoaderRoute: typeof ProjectsIdIndexImport
      parentRoute: typeof ProjectsIdImport
    }
    '/projects/$id/phases/$phaseId': {
      id: '/projects/$id/phases/$phaseId'
      path: '/phases/$phaseId'
      fullPath: '/projects/$id/phases/$phaseId'
      preLoaderRoute: typeof ProjectsIdPhasesPhaseIdImport
      parentRoute: typeof ProjectsIdImport
    }
    '/projects/$id/phases/$phaseId/$viewMode': {
      id: '/projects/$id/phases/$phaseId/$viewMode'
      path: '/$viewMode'
      fullPath: '/projects/$id/phases/$phaseId/$viewMode'
      preLoaderRoute: typeof ProjectsIdPhasesPhaseIdViewModeImport
      parentRoute: typeof ProjectsIdPhasesPhaseIdImport
    }
  }
}

// Create and export the route tree

interface ChatRouteChildren {
  ChatSessionIdRoute: typeof ChatSessionIdRoute
}

const ChatRouteChildren: ChatRouteChildren = {
  ChatSessionIdRoute: ChatSessionIdRoute,
}

const ChatRouteWithChildren = ChatRoute._addFileChildren(ChatRouteChildren)

interface ProjectsIdPhasesPhaseIdRouteChildren {
  ProjectsIdPhasesPhaseIdViewModeRoute: typeof ProjectsIdPhasesPhaseIdViewModeRoute
}

const ProjectsIdPhasesPhaseIdRouteChildren: ProjectsIdPhasesPhaseIdRouteChildren =
  {
    ProjectsIdPhasesPhaseIdViewModeRoute: ProjectsIdPhasesPhaseIdViewModeRoute,
  }

const ProjectsIdPhasesPhaseIdRouteWithChildren =
  ProjectsIdPhasesPhaseIdRoute._addFileChildren(
    ProjectsIdPhasesPhaseIdRouteChildren,
  )

interface ProjectsIdRouteChildren {
  ProjectsIdNewRoute: typeof ProjectsIdNewRoute
  ProjectsIdIndexRoute: typeof ProjectsIdIndexRoute
  ProjectsIdPhasesPhaseIdRoute: typeof ProjectsIdPhasesPhaseIdRouteWithChildren
}

const ProjectsIdRouteChildren: ProjectsIdRouteChildren = {
  ProjectsIdNewRoute: ProjectsIdNewRoute,
  ProjectsIdIndexRoute: ProjectsIdIndexRoute,
  ProjectsIdPhasesPhaseIdRoute: ProjectsIdPhasesPhaseIdRouteWithChildren,
}

const ProjectsIdRouteWithChildren = ProjectsIdRoute._addFileChildren(
  ProjectsIdRouteChildren,
)

interface ProjectsRouteChildren {
  ProjectsIdRoute: typeof ProjectsIdRouteWithChildren
}

const ProjectsRouteChildren: ProjectsRouteChildren = {
  ProjectsIdRoute: ProjectsIdRouteWithChildren,
}

const ProjectsRouteWithChildren = ProjectsRoute._addFileChildren(
  ProjectsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/chat': typeof ChatRouteWithChildren
  '/projects': typeof ProjectsRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/company': typeof CompanyLazyRoute
  '/files_manager': typeof FilesmanagerLazyRoute
  '/projects_manager': typeof ProjectsmanagerLazyRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/privacy-policy': typeof AuthPrivacyPolicyRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/service-term': typeof AuthServiceTermRoute
  '/chat/$sessionId': typeof ChatSessionIdRoute
  '/projects/$id': typeof ProjectsIdRouteWithChildren
  '/projects/$id/new': typeof ProjectsIdNewRoute
  '/projects/$id/': typeof ProjectsIdIndexRoute
  '/projects/$id/phases/$phaseId': typeof ProjectsIdPhasesPhaseIdRouteWithChildren
  '/projects/$id/phases/$phaseId/$viewMode': typeof ProjectsIdPhasesPhaseIdViewModeRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/chat': typeof ChatRouteWithChildren
  '/projects': typeof ProjectsRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/company': typeof CompanyLazyRoute
  '/files_manager': typeof FilesmanagerLazyRoute
  '/projects_manager': typeof ProjectsmanagerLazyRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/privacy-policy': typeof AuthPrivacyPolicyRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/service-term': typeof AuthServiceTermRoute
  '/chat/$sessionId': typeof ChatSessionIdRoute
  '/projects/$id/new': typeof ProjectsIdNewRoute
  '/projects/$id': typeof ProjectsIdIndexRoute
  '/projects/$id/phases/$phaseId': typeof ProjectsIdPhasesPhaseIdRouteWithChildren
  '/projects/$id/phases/$phaseId/$viewMode': typeof ProjectsIdPhasesPhaseIdViewModeRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/chat': typeof ChatRouteWithChildren
  '/projects': typeof ProjectsRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/company': typeof CompanyLazyRoute
  '/files_manager': typeof FilesmanagerLazyRoute
  '/projects_manager': typeof ProjectsmanagerLazyRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/privacy-policy': typeof AuthPrivacyPolicyRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/service-term': typeof AuthServiceTermRoute
  '/chat/$sessionId': typeof ChatSessionIdRoute
  '/projects/$id': typeof ProjectsIdRouteWithChildren
  '/projects/$id/new': typeof ProjectsIdNewRoute
  '/projects/$id/': typeof ProjectsIdIndexRoute
  '/projects/$id/phases/$phaseId': typeof ProjectsIdPhasesPhaseIdRouteWithChildren
  '/projects/$id/phases/$phaseId/$viewMode': typeof ProjectsIdPhasesPhaseIdViewModeRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chat'
    | '/projects'
    | '/about'
    | '/company'
    | '/files_manager'
    | '/projects_manager'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/privacy-policy'
    | '/auth/register'
    | '/auth/service-term'
    | '/chat/$sessionId'
    | '/projects/$id'
    | '/projects/$id/new'
    | '/projects/$id/'
    | '/projects/$id/phases/$phaseId'
    | '/projects/$id/phases/$phaseId/$viewMode'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/chat'
    | '/projects'
    | '/about'
    | '/company'
    | '/files_manager'
    | '/projects_manager'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/privacy-policy'
    | '/auth/register'
    | '/auth/service-term'
    | '/chat/$sessionId'
    | '/projects/$id/new'
    | '/projects/$id'
    | '/projects/$id/phases/$phaseId'
    | '/projects/$id/phases/$phaseId/$viewMode'
  id:
    | '__root__'
    | '/'
    | '/chat'
    | '/projects'
    | '/about'
    | '/company'
    | '/files_manager'
    | '/projects_manager'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/privacy-policy'
    | '/auth/register'
    | '/auth/service-term'
    | '/chat/$sessionId'
    | '/projects/$id'
    | '/projects/$id/new'
    | '/projects/$id/'
    | '/projects/$id/phases/$phaseId'
    | '/projects/$id/phases/$phaseId/$viewMode'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ChatRoute: typeof ChatRouteWithChildren
  ProjectsRoute: typeof ProjectsRouteWithChildren
  AboutLazyRoute: typeof AboutLazyRoute
  CompanyLazyRoute: typeof CompanyLazyRoute
  FilesmanagerLazyRoute: typeof FilesmanagerLazyRoute
  ProjectsmanagerLazyRoute: typeof ProjectsmanagerLazyRoute
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthPrivacyPolicyRoute: typeof AuthPrivacyPolicyRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  AuthServiceTermRoute: typeof AuthServiceTermRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ChatRoute: ChatRouteWithChildren,
  ProjectsRoute: ProjectsRouteWithChildren,
  AboutLazyRoute: AboutLazyRoute,
  CompanyLazyRoute: CompanyLazyRoute,
  FilesmanagerLazyRoute: FilesmanagerLazyRoute,
  ProjectsmanagerLazyRoute: ProjectsmanagerLazyRoute,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthPrivacyPolicyRoute: AuthPrivacyPolicyRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AuthServiceTermRoute: AuthServiceTermRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/chat",
        "/projects",
        "/about",
        "/company",
        "/files_manager",
        "/projects_manager",
        "/auth/forgot-password",
        "/auth/login",
        "/auth/privacy-policy",
        "/auth/register",
        "/auth/service-term"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/chat": {
      "filePath": "chat.tsx",
      "children": [
        "/chat/$sessionId"
      ]
    },
    "/projects": {
      "filePath": "projects.tsx",
      "children": [
        "/projects/$id"
      ]
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/company": {
      "filePath": "company.lazy.tsx"
    },
    "/files_manager": {
      "filePath": "files_manager.lazy.tsx"
    },
    "/projects_manager": {
      "filePath": "projects_manager.lazy.tsx"
    },
    "/auth/forgot-password": {
      "filePath": "auth/forgot-password.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/privacy-policy": {
      "filePath": "auth/privacy-policy.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/auth/service-term": {
      "filePath": "auth/service-term.tsx"
    },
    "/chat/$sessionId": {
      "filePath": "chat.$sessionId.tsx",
      "parent": "/chat"
    },
    "/projects/$id": {
      "filePath": "projects.$id.tsx",
      "parent": "/projects",
      "children": [
        "/projects/$id/new",
        "/projects/$id/",
        "/projects/$id/phases/$phaseId"
      ]
    },
    "/projects/$id/new": {
      "filePath": "projects.$id.new.tsx",
      "parent": "/projects/$id"
    },
    "/projects/$id/": {
      "filePath": "projects.$id.index.tsx",
      "parent": "/projects/$id"
    },
    "/projects/$id/phases/$phaseId": {
      "filePath": "projects.$id.phases.$phaseId.tsx",
      "parent": "/projects/$id",
      "children": [
        "/projects/$id/phases/$phaseId/$viewMode"
      ]
    },
    "/projects/$id/phases/$phaseId/$viewMode": {
      "filePath": "projects.$id.phases.$phaseId.$viewMode.tsx",
      "parent": "/projects/$id/phases/$phaseId"
    }
  }
}
ROUTE_MANIFEST_END */
