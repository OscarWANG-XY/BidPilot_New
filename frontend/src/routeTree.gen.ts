/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestImport } from './routes/test'
import { Route as ProjectsImport } from './routes/projects'
import { Route as ProjectsProjectIdImport } from './routes/projects.$projectId'

// Create Virtual Routes

const TenderbidLazyImport = createFileRoute('/tender_bid')()
const CompanyLazyImport = createFileRoute('/company')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const TenderbidLazyRoute = TenderbidLazyImport.update({
  id: '/tender_bid',
  path: '/tender_bid',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tender_bid.lazy').then((d) => d.Route))

const CompanyLazyRoute = CompanyLazyImport.update({
  id: '/company',
  path: '/company',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/company.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsRoute = ProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProjectsProjectIdRoute = ProjectsProjectIdImport.update({
  id: '/$projectId',
  path: '/$projectId',
  getParentRoute: () => ProjectsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/company': {
      id: '/company'
      path: '/company'
      fullPath: '/company'
      preLoaderRoute: typeof CompanyLazyImport
      parentRoute: typeof rootRoute
    }
    '/tender_bid': {
      id: '/tender_bid'
      path: '/tender_bid'
      fullPath: '/tender_bid'
      preLoaderRoute: typeof TenderbidLazyImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdImport
      parentRoute: typeof ProjectsImport
    }
  }
}

// Create and export the route tree

interface ProjectsRouteChildren {
  ProjectsProjectIdRoute: typeof ProjectsProjectIdRoute
}

const ProjectsRouteChildren: ProjectsRouteChildren = {
  ProjectsProjectIdRoute: ProjectsProjectIdRoute,
}

const ProjectsRouteWithChildren = ProjectsRoute._addFileChildren(
  ProjectsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/test': typeof TestRoute
  '/about': typeof AboutLazyRoute
  '/company': typeof CompanyLazyRoute
  '/tender_bid': typeof TenderbidLazyRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/test': typeof TestRoute
  '/about': typeof AboutLazyRoute
  '/company': typeof CompanyLazyRoute
  '/tender_bid': typeof TenderbidLazyRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/test': typeof TestRoute
  '/about': typeof AboutLazyRoute
  '/company': typeof CompanyLazyRoute
  '/tender_bid': typeof TenderbidLazyRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/projects'
    | '/test'
    | '/about'
    | '/company'
    | '/tender_bid'
    | '/projects/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/projects'
    | '/test'
    | '/about'
    | '/company'
    | '/tender_bid'
    | '/projects/$projectId'
  id:
    | '__root__'
    | '/'
    | '/projects'
    | '/test'
    | '/about'
    | '/company'
    | '/tender_bid'
    | '/projects/$projectId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ProjectsRoute: typeof ProjectsRouteWithChildren
  TestRoute: typeof TestRoute
  AboutLazyRoute: typeof AboutLazyRoute
  CompanyLazyRoute: typeof CompanyLazyRoute
  TenderbidLazyRoute: typeof TenderbidLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ProjectsRoute: ProjectsRouteWithChildren,
  TestRoute: TestRoute,
  AboutLazyRoute: AboutLazyRoute,
  CompanyLazyRoute: CompanyLazyRoute,
  TenderbidLazyRoute: TenderbidLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/projects",
        "/test",
        "/about",
        "/company",
        "/tender_bid"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/projects": {
      "filePath": "projects.tsx",
      "children": [
        "/projects/$projectId"
      ]
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/company": {
      "filePath": "company.lazy.tsx"
    },
    "/tender_bid": {
      "filePath": "tender_bid.lazy.tsx"
    },
    "/projects/$projectId": {
      "filePath": "projects.$projectId.tsx",
      "parent": "/projects"
    }
  }
}
ROUTE_MANIFEST_END */
