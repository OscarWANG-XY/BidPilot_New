/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestgroundImport } from './routes/testground'
import { Route as ChatImport } from './routes/chat'
import { Route as ProjectsIndexImport } from './routes/projects/index'
import { Route as PlaygroundIndexImport } from './routes/playground/index'
import { Route as UsersSubscriptionImport } from './routes/users/subscription'
import { Route as UsersSettingsImport } from './routes/users/settings'
import { Route as UsersBillingImport } from './routes/users/billing'
import { Route as UsersAccountImport } from './routes/users/account'
import { Route as ProjectsProjectIdImport } from './routes/projects/$projectId'
import { Route as PlaygroundTiptapeditorImport } from './routes/playground/tiptap_editor'
import { Route as PlaygroundTaskImport } from './routes/playground/task'
import { Route as PlaygroundMarkdowneditorImport } from './routes/playground/markdown_editor'
import { Route as PlaygroundLayoutImport } from './routes/playground/_layout'
import { Route as ChatSessionIdImport } from './routes/chat.$sessionId'
import { Route as AuthServiceTermImport } from './routes/auth/service-term'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthPrivacyPolicyImport } from './routes/auth/privacy-policy'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AuthForgotPasswordImport } from './routes/auth/forgot-password'
import { Route as ProjectsProjectIdIndexImport } from './routes/projects/$projectId/index'
import { Route as ProjectsProjectIdTenderAnalysisImport } from './routes/projects/$projectId/tender-analysis'
import { Route as ProjectsProjectIdBidWritingImport } from './routes/projects/$projectId/bid-writing'
import { Route as ProjectsProjectIdHistoryIndexImport } from './routes/projects/$projectId/history/index'
import { Route as ProjectsProjectIdHistoryHistoryIdImport } from './routes/projects/$projectId/history/$historyId'
import { Route as ProjectsProjectIdHistoryTaskHistoryIdImport } from './routes/projects/$projectId/history/task/$historyId'
import { Route as ProjectsProjectIdHistoryStageHistoryIdImport } from './routes/projects/$projectId/history/stage/$historyId'
import { Route as ProjectsProjectIdHistoryProjectHistoryIdImport } from './routes/projects/$projectId/history/project/$historyId'

// Create Virtual Routes

const PlaygroundImport = createFileRoute('/playground')()
const ProjectsmanagerLazyImport = createFileRoute('/projects_manager')()
const FilesmanagerLazyImport = createFileRoute('/files_manager')()
const CompanyLazyImport = createFileRoute('/company')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const PlaygroundRoute = PlaygroundImport.update({
  id: '/playground',
  path: '/playground',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsmanagerLazyRoute = ProjectsmanagerLazyImport.update({
  id: '/projects_manager',
  path: '/projects_manager',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/projects_manager.lazy').then((d) => d.Route),
)

const FilesmanagerLazyRoute = FilesmanagerLazyImport.update({
  id: '/files_manager',
  path: '/files_manager',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/files_manager.lazy').then((d) => d.Route))

const CompanyLazyRoute = CompanyLazyImport.update({
  id: '/company',
  path: '/company',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/company.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const TestgroundRoute = TestgroundImport.update({
  id: '/testground',
  path: '/testground',
  getParentRoute: () => rootRoute,
} as any)

const ChatRoute = ChatImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProjectsIndexRoute = ProjectsIndexImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRoute,
} as any)

const PlaygroundIndexRoute = PlaygroundIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PlaygroundRoute,
} as any)

const UsersSubscriptionRoute = UsersSubscriptionImport.update({
  id: '/users/subscription',
  path: '/users/subscription',
  getParentRoute: () => rootRoute,
} as any)

const UsersSettingsRoute = UsersSettingsImport.update({
  id: '/users/settings',
  path: '/users/settings',
  getParentRoute: () => rootRoute,
} as any)

const UsersBillingRoute = UsersBillingImport.update({
  id: '/users/billing',
  path: '/users/billing',
  getParentRoute: () => rootRoute,
} as any)

const UsersAccountRoute = UsersAccountImport.update({
  id: '/users/account',
  path: '/users/account',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdRoute = ProjectsProjectIdImport.update({
  id: '/projects/$projectId',
  path: '/projects/$projectId',
  getParentRoute: () => rootRoute,
} as any)

const PlaygroundTiptapeditorRoute = PlaygroundTiptapeditorImport.update({
  id: '/tiptap_editor',
  path: '/tiptap_editor',
  getParentRoute: () => PlaygroundRoute,
} as any)

const PlaygroundTaskRoute = PlaygroundTaskImport.update({
  id: '/task',
  path: '/task',
  getParentRoute: () => PlaygroundRoute,
} as any)

const PlaygroundMarkdowneditorRoute = PlaygroundMarkdowneditorImport.update({
  id: '/markdown_editor',
  path: '/markdown_editor',
  getParentRoute: () => PlaygroundRoute,
} as any)

const PlaygroundLayoutRoute = PlaygroundLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => PlaygroundRoute,
} as any)

const ChatSessionIdRoute = ChatSessionIdImport.update({
  id: '/$sessionId',
  path: '/$sessionId',
  getParentRoute: () => ChatRoute,
} as any)

const AuthServiceTermRoute = AuthServiceTermImport.update({
  id: '/auth/service-term',
  path: '/auth/service-term',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthPrivacyPolicyRoute = AuthPrivacyPolicyImport.update({
  id: '/auth/privacy-policy',
  path: '/auth/privacy-policy',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/auth/forgot-password',
  path: '/auth/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdIndexRoute = ProjectsProjectIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProjectsProjectIdRoute,
} as any)

const ProjectsProjectIdTenderAnalysisRoute =
  ProjectsProjectIdTenderAnalysisImport.update({
    id: '/tender-analysis',
    path: '/tender-analysis',
    getParentRoute: () => ProjectsProjectIdRoute,
  } as any)

const ProjectsProjectIdBidWritingRoute =
  ProjectsProjectIdBidWritingImport.update({
    id: '/bid-writing',
    path: '/bid-writing',
    getParentRoute: () => ProjectsProjectIdRoute,
  } as any)

const ProjectsProjectIdHistoryIndexRoute =
  ProjectsProjectIdHistoryIndexImport.update({
    id: '/history/',
    path: '/history/',
    getParentRoute: () => ProjectsProjectIdRoute,
  } as any)

const ProjectsProjectIdHistoryHistoryIdRoute =
  ProjectsProjectIdHistoryHistoryIdImport.update({
    id: '/history/$historyId',
    path: '/history/$historyId',
    getParentRoute: () => ProjectsProjectIdRoute,
  } as any)

const ProjectsProjectIdHistoryTaskHistoryIdRoute =
  ProjectsProjectIdHistoryTaskHistoryIdImport.update({
    id: '/history/task/$historyId',
    path: '/history/task/$historyId',
    getParentRoute: () => ProjectsProjectIdRoute,
  } as any)

const ProjectsProjectIdHistoryStageHistoryIdRoute =
  ProjectsProjectIdHistoryStageHistoryIdImport.update({
    id: '/history/stage/$historyId',
    path: '/history/stage/$historyId',
    getParentRoute: () => ProjectsProjectIdRoute,
  } as any)

const ProjectsProjectIdHistoryProjectHistoryIdRoute =
  ProjectsProjectIdHistoryProjectHistoryIdImport.update({
    id: '/history/project/$historyId',
    path: '/history/project/$historyId',
    getParentRoute: () => ProjectsProjectIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatImport
      parentRoute: typeof rootRoute
    }
    '/testground': {
      id: '/testground'
      path: '/testground'
      fullPath: '/testground'
      preLoaderRoute: typeof TestgroundImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/company': {
      id: '/company'
      path: '/company'
      fullPath: '/company'
      preLoaderRoute: typeof CompanyLazyImport
      parentRoute: typeof rootRoute
    }
    '/files_manager': {
      id: '/files_manager'
      path: '/files_manager'
      fullPath: '/files_manager'
      preLoaderRoute: typeof FilesmanagerLazyImport
      parentRoute: typeof rootRoute
    }
    '/projects_manager': {
      id: '/projects_manager'
      path: '/projects_manager'
      fullPath: '/projects_manager'
      preLoaderRoute: typeof ProjectsmanagerLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/auth/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/privacy-policy': {
      id: '/auth/privacy-policy'
      path: '/auth/privacy-policy'
      fullPath: '/auth/privacy-policy'
      preLoaderRoute: typeof AuthPrivacyPolicyImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/auth/service-term': {
      id: '/auth/service-term'
      path: '/auth/service-term'
      fullPath: '/auth/service-term'
      preLoaderRoute: typeof AuthServiceTermImport
      parentRoute: typeof rootRoute
    }
    '/chat/$sessionId': {
      id: '/chat/$sessionId'
      path: '/$sessionId'
      fullPath: '/chat/$sessionId'
      preLoaderRoute: typeof ChatSessionIdImport
      parentRoute: typeof ChatImport
    }
    '/playground': {
      id: '/playground'
      path: '/playground'
      fullPath: '/playground'
      preLoaderRoute: typeof PlaygroundImport
      parentRoute: typeof rootRoute
    }
    '/playground/_layout': {
      id: '/playground/_layout'
      path: '/playground'
      fullPath: '/playground'
      preLoaderRoute: typeof PlaygroundLayoutImport
      parentRoute: typeof PlaygroundRoute
    }
    '/playground/markdown_editor': {
      id: '/playground/markdown_editor'
      path: '/markdown_editor'
      fullPath: '/playground/markdown_editor'
      preLoaderRoute: typeof PlaygroundMarkdowneditorImport
      parentRoute: typeof PlaygroundImport
    }
    '/playground/task': {
      id: '/playground/task'
      path: '/task'
      fullPath: '/playground/task'
      preLoaderRoute: typeof PlaygroundTaskImport
      parentRoute: typeof PlaygroundImport
    }
    '/playground/tiptap_editor': {
      id: '/playground/tiptap_editor'
      path: '/tiptap_editor'
      fullPath: '/playground/tiptap_editor'
      preLoaderRoute: typeof PlaygroundTiptapeditorImport
      parentRoute: typeof PlaygroundImport
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdImport
      parentRoute: typeof rootRoute
    }
    '/users/account': {
      id: '/users/account'
      path: '/users/account'
      fullPath: '/users/account'
      preLoaderRoute: typeof UsersAccountImport
      parentRoute: typeof rootRoute
    }
    '/users/billing': {
      id: '/users/billing'
      path: '/users/billing'
      fullPath: '/users/billing'
      preLoaderRoute: typeof UsersBillingImport
      parentRoute: typeof rootRoute
    }
    '/users/settings': {
      id: '/users/settings'
      path: '/users/settings'
      fullPath: '/users/settings'
      preLoaderRoute: typeof UsersSettingsImport
      parentRoute: typeof rootRoute
    }
    '/users/subscription': {
      id: '/users/subscription'
      path: '/users/subscription'
      fullPath: '/users/subscription'
      preLoaderRoute: typeof UsersSubscriptionImport
      parentRoute: typeof rootRoute
    }
    '/playground/': {
      id: '/playground/'
      path: '/'
      fullPath: '/playground/'
      preLoaderRoute: typeof PlaygroundIndexImport
      parentRoute: typeof PlaygroundImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId/bid-writing': {
      id: '/projects/$projectId/bid-writing'
      path: '/bid-writing'
      fullPath: '/projects/$projectId/bid-writing'
      preLoaderRoute: typeof ProjectsProjectIdBidWritingImport
      parentRoute: typeof ProjectsProjectIdImport
    }
    '/projects/$projectId/tender-analysis': {
      id: '/projects/$projectId/tender-analysis'
      path: '/tender-analysis'
      fullPath: '/projects/$projectId/tender-analysis'
      preLoaderRoute: typeof ProjectsProjectIdTenderAnalysisImport
      parentRoute: typeof ProjectsProjectIdImport
    }
    '/projects/$projectId/': {
      id: '/projects/$projectId/'
      path: '/'
      fullPath: '/projects/$projectId/'
      preLoaderRoute: typeof ProjectsProjectIdIndexImport
      parentRoute: typeof ProjectsProjectIdImport
    }
    '/projects/$projectId/history/$historyId': {
      id: '/projects/$projectId/history/$historyId'
      path: '/history/$historyId'
      fullPath: '/projects/$projectId/history/$historyId'
      preLoaderRoute: typeof ProjectsProjectIdHistoryHistoryIdImport
      parentRoute: typeof ProjectsProjectIdImport
    }
    '/projects/$projectId/history/': {
      id: '/projects/$projectId/history/'
      path: '/history'
      fullPath: '/projects/$projectId/history'
      preLoaderRoute: typeof ProjectsProjectIdHistoryIndexImport
      parentRoute: typeof ProjectsProjectIdImport
    }
    '/projects/$projectId/history/project/$historyId': {
      id: '/projects/$projectId/history/project/$historyId'
      path: '/history/project/$historyId'
      fullPath: '/projects/$projectId/history/project/$historyId'
      preLoaderRoute: typeof ProjectsProjectIdHistoryProjectHistoryIdImport
      parentRoute: typeof ProjectsProjectIdImport
    }
    '/projects/$projectId/history/stage/$historyId': {
      id: '/projects/$projectId/history/stage/$historyId'
      path: '/history/stage/$historyId'
      fullPath: '/projects/$projectId/history/stage/$historyId'
      preLoaderRoute: typeof ProjectsProjectIdHistoryStageHistoryIdImport
      parentRoute: typeof ProjectsProjectIdImport
    }
    '/projects/$projectId/history/task/$historyId': {
      id: '/projects/$projectId/history/task/$historyId'
      path: '/history/task/$historyId'
      fullPath: '/projects/$projectId/history/task/$historyId'
      preLoaderRoute: typeof ProjectsProjectIdHistoryTaskHistoryIdImport
      parentRoute: typeof ProjectsProjectIdImport
    }
  }
}

// Create and export the route tree

interface ChatRouteChildren {
  ChatSessionIdRoute: typeof ChatSessionIdRoute
}

const ChatRouteChildren: ChatRouteChildren = {
  ChatSessionIdRoute: ChatSessionIdRoute,
}

const ChatRouteWithChildren = ChatRoute._addFileChildren(ChatRouteChildren)

interface PlaygroundRouteChildren {
  PlaygroundLayoutRoute: typeof PlaygroundLayoutRoute
  PlaygroundMarkdowneditorRoute: typeof PlaygroundMarkdowneditorRoute
  PlaygroundTaskRoute: typeof PlaygroundTaskRoute
  PlaygroundTiptapeditorRoute: typeof PlaygroundTiptapeditorRoute
  PlaygroundIndexRoute: typeof PlaygroundIndexRoute
}

const PlaygroundRouteChildren: PlaygroundRouteChildren = {
  PlaygroundLayoutRoute: PlaygroundLayoutRoute,
  PlaygroundMarkdowneditorRoute: PlaygroundMarkdowneditorRoute,
  PlaygroundTaskRoute: PlaygroundTaskRoute,
  PlaygroundTiptapeditorRoute: PlaygroundTiptapeditorRoute,
  PlaygroundIndexRoute: PlaygroundIndexRoute,
}

const PlaygroundRouteWithChildren = PlaygroundRoute._addFileChildren(
  PlaygroundRouteChildren,
)

interface ProjectsProjectIdRouteChildren {
  ProjectsProjectIdBidWritingRoute: typeof ProjectsProjectIdBidWritingRoute
  ProjectsProjectIdTenderAnalysisRoute: typeof ProjectsProjectIdTenderAnalysisRoute
  ProjectsProjectIdIndexRoute: typeof ProjectsProjectIdIndexRoute
  ProjectsProjectIdHistoryHistoryIdRoute: typeof ProjectsProjectIdHistoryHistoryIdRoute
  ProjectsProjectIdHistoryIndexRoute: typeof ProjectsProjectIdHistoryIndexRoute
  ProjectsProjectIdHistoryProjectHistoryIdRoute: typeof ProjectsProjectIdHistoryProjectHistoryIdRoute
  ProjectsProjectIdHistoryStageHistoryIdRoute: typeof ProjectsProjectIdHistoryStageHistoryIdRoute
  ProjectsProjectIdHistoryTaskHistoryIdRoute: typeof ProjectsProjectIdHistoryTaskHistoryIdRoute
}

const ProjectsProjectIdRouteChildren: ProjectsProjectIdRouteChildren = {
  ProjectsProjectIdBidWritingRoute: ProjectsProjectIdBidWritingRoute,
  ProjectsProjectIdTenderAnalysisRoute: ProjectsProjectIdTenderAnalysisRoute,
  ProjectsProjectIdIndexRoute: ProjectsProjectIdIndexRoute,
  ProjectsProjectIdHistoryHistoryIdRoute:
    ProjectsProjectIdHistoryHistoryIdRoute,
  ProjectsProjectIdHistoryIndexRoute: ProjectsProjectIdHistoryIndexRoute,
  ProjectsProjectIdHistoryProjectHistoryIdRoute:
    ProjectsProjectIdHistoryProjectHistoryIdRoute,
  ProjectsProjectIdHistoryStageHistoryIdRoute:
    ProjectsProjectIdHistoryStageHistoryIdRoute,
  ProjectsProjectIdHistoryTaskHistoryIdRoute:
    ProjectsProjectIdHistoryTaskHistoryIdRoute,
}

const ProjectsProjectIdRouteWithChildren =
  ProjectsProjectIdRoute._addFileChildren(ProjectsProjectIdRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/chat': typeof ChatRouteWithChildren
  '/testground': typeof TestgroundRoute
  '/about': typeof AboutLazyRoute
  '/company': typeof CompanyLazyRoute
  '/files_manager': typeof FilesmanagerLazyRoute
  '/projects_manager': typeof ProjectsmanagerLazyRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/privacy-policy': typeof AuthPrivacyPolicyRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/service-term': typeof AuthServiceTermRoute
  '/chat/$sessionId': typeof ChatSessionIdRoute
  '/playground': typeof PlaygroundLayoutRoute
  '/playground/markdown_editor': typeof PlaygroundMarkdowneditorRoute
  '/playground/task': typeof PlaygroundTaskRoute
  '/playground/tiptap_editor': typeof PlaygroundTiptapeditorRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteWithChildren
  '/users/account': typeof UsersAccountRoute
  '/users/billing': typeof UsersBillingRoute
  '/users/settings': typeof UsersSettingsRoute
  '/users/subscription': typeof UsersSubscriptionRoute
  '/playground/': typeof PlaygroundIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectId/bid-writing': typeof ProjectsProjectIdBidWritingRoute
  '/projects/$projectId/tender-analysis': typeof ProjectsProjectIdTenderAnalysisRoute
  '/projects/$projectId/': typeof ProjectsProjectIdIndexRoute
  '/projects/$projectId/history/$historyId': typeof ProjectsProjectIdHistoryHistoryIdRoute
  '/projects/$projectId/history': typeof ProjectsProjectIdHistoryIndexRoute
  '/projects/$projectId/history/project/$historyId': typeof ProjectsProjectIdHistoryProjectHistoryIdRoute
  '/projects/$projectId/history/stage/$historyId': typeof ProjectsProjectIdHistoryStageHistoryIdRoute
  '/projects/$projectId/history/task/$historyId': typeof ProjectsProjectIdHistoryTaskHistoryIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/chat': typeof ChatRouteWithChildren
  '/testground': typeof TestgroundRoute
  '/about': typeof AboutLazyRoute
  '/company': typeof CompanyLazyRoute
  '/files_manager': typeof FilesmanagerLazyRoute
  '/projects_manager': typeof ProjectsmanagerLazyRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/privacy-policy': typeof AuthPrivacyPolicyRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/service-term': typeof AuthServiceTermRoute
  '/chat/$sessionId': typeof ChatSessionIdRoute
  '/playground': typeof PlaygroundIndexRoute
  '/playground/markdown_editor': typeof PlaygroundMarkdowneditorRoute
  '/playground/task': typeof PlaygroundTaskRoute
  '/playground/tiptap_editor': typeof PlaygroundTiptapeditorRoute
  '/users/account': typeof UsersAccountRoute
  '/users/billing': typeof UsersBillingRoute
  '/users/settings': typeof UsersSettingsRoute
  '/users/subscription': typeof UsersSubscriptionRoute
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectId/bid-writing': typeof ProjectsProjectIdBidWritingRoute
  '/projects/$projectId/tender-analysis': typeof ProjectsProjectIdTenderAnalysisRoute
  '/projects/$projectId': typeof ProjectsProjectIdIndexRoute
  '/projects/$projectId/history/$historyId': typeof ProjectsProjectIdHistoryHistoryIdRoute
  '/projects/$projectId/history': typeof ProjectsProjectIdHistoryIndexRoute
  '/projects/$projectId/history/project/$historyId': typeof ProjectsProjectIdHistoryProjectHistoryIdRoute
  '/projects/$projectId/history/stage/$historyId': typeof ProjectsProjectIdHistoryStageHistoryIdRoute
  '/projects/$projectId/history/task/$historyId': typeof ProjectsProjectIdHistoryTaskHistoryIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/chat': typeof ChatRouteWithChildren
  '/testground': typeof TestgroundRoute
  '/about': typeof AboutLazyRoute
  '/company': typeof CompanyLazyRoute
  '/files_manager': typeof FilesmanagerLazyRoute
  '/projects_manager': typeof ProjectsmanagerLazyRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/privacy-policy': typeof AuthPrivacyPolicyRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/service-term': typeof AuthServiceTermRoute
  '/chat/$sessionId': typeof ChatSessionIdRoute
  '/playground': typeof PlaygroundRouteWithChildren
  '/playground/_layout': typeof PlaygroundLayoutRoute
  '/playground/markdown_editor': typeof PlaygroundMarkdowneditorRoute
  '/playground/task': typeof PlaygroundTaskRoute
  '/playground/tiptap_editor': typeof PlaygroundTiptapeditorRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteWithChildren
  '/users/account': typeof UsersAccountRoute
  '/users/billing': typeof UsersBillingRoute
  '/users/settings': typeof UsersSettingsRoute
  '/users/subscription': typeof UsersSubscriptionRoute
  '/playground/': typeof PlaygroundIndexRoute
  '/projects/': typeof ProjectsIndexRoute
  '/projects/$projectId/bid-writing': typeof ProjectsProjectIdBidWritingRoute
  '/projects/$projectId/tender-analysis': typeof ProjectsProjectIdTenderAnalysisRoute
  '/projects/$projectId/': typeof ProjectsProjectIdIndexRoute
  '/projects/$projectId/history/$historyId': typeof ProjectsProjectIdHistoryHistoryIdRoute
  '/projects/$projectId/history/': typeof ProjectsProjectIdHistoryIndexRoute
  '/projects/$projectId/history/project/$historyId': typeof ProjectsProjectIdHistoryProjectHistoryIdRoute
  '/projects/$projectId/history/stage/$historyId': typeof ProjectsProjectIdHistoryStageHistoryIdRoute
  '/projects/$projectId/history/task/$historyId': typeof ProjectsProjectIdHistoryTaskHistoryIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chat'
    | '/testground'
    | '/about'
    | '/company'
    | '/files_manager'
    | '/projects_manager'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/privacy-policy'
    | '/auth/register'
    | '/auth/service-term'
    | '/chat/$sessionId'
    | '/playground'
    | '/playground/markdown_editor'
    | '/playground/task'
    | '/playground/tiptap_editor'
    | '/projects/$projectId'
    | '/users/account'
    | '/users/billing'
    | '/users/settings'
    | '/users/subscription'
    | '/playground/'
    | '/projects'
    | '/projects/$projectId/bid-writing'
    | '/projects/$projectId/tender-analysis'
    | '/projects/$projectId/'
    | '/projects/$projectId/history/$historyId'
    | '/projects/$projectId/history'
    | '/projects/$projectId/history/project/$historyId'
    | '/projects/$projectId/history/stage/$historyId'
    | '/projects/$projectId/history/task/$historyId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/chat'
    | '/testground'
    | '/about'
    | '/company'
    | '/files_manager'
    | '/projects_manager'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/privacy-policy'
    | '/auth/register'
    | '/auth/service-term'
    | '/chat/$sessionId'
    | '/playground'
    | '/playground/markdown_editor'
    | '/playground/task'
    | '/playground/tiptap_editor'
    | '/users/account'
    | '/users/billing'
    | '/users/settings'
    | '/users/subscription'
    | '/projects'
    | '/projects/$projectId/bid-writing'
    | '/projects/$projectId/tender-analysis'
    | '/projects/$projectId'
    | '/projects/$projectId/history/$historyId'
    | '/projects/$projectId/history'
    | '/projects/$projectId/history/project/$historyId'
    | '/projects/$projectId/history/stage/$historyId'
    | '/projects/$projectId/history/task/$historyId'
  id:
    | '__root__'
    | '/'
    | '/chat'
    | '/testground'
    | '/about'
    | '/company'
    | '/files_manager'
    | '/projects_manager'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/privacy-policy'
    | '/auth/register'
    | '/auth/service-term'
    | '/chat/$sessionId'
    | '/playground'
    | '/playground/_layout'
    | '/playground/markdown_editor'
    | '/playground/task'
    | '/playground/tiptap_editor'
    | '/projects/$projectId'
    | '/users/account'
    | '/users/billing'
    | '/users/settings'
    | '/users/subscription'
    | '/playground/'
    | '/projects/'
    | '/projects/$projectId/bid-writing'
    | '/projects/$projectId/tender-analysis'
    | '/projects/$projectId/'
    | '/projects/$projectId/history/$historyId'
    | '/projects/$projectId/history/'
    | '/projects/$projectId/history/project/$historyId'
    | '/projects/$projectId/history/stage/$historyId'
    | '/projects/$projectId/history/task/$historyId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ChatRoute: typeof ChatRouteWithChildren
  TestgroundRoute: typeof TestgroundRoute
  AboutLazyRoute: typeof AboutLazyRoute
  CompanyLazyRoute: typeof CompanyLazyRoute
  FilesmanagerLazyRoute: typeof FilesmanagerLazyRoute
  ProjectsmanagerLazyRoute: typeof ProjectsmanagerLazyRoute
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthPrivacyPolicyRoute: typeof AuthPrivacyPolicyRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  AuthServiceTermRoute: typeof AuthServiceTermRoute
  PlaygroundRoute: typeof PlaygroundRouteWithChildren
  ProjectsProjectIdRoute: typeof ProjectsProjectIdRouteWithChildren
  UsersAccountRoute: typeof UsersAccountRoute
  UsersBillingRoute: typeof UsersBillingRoute
  UsersSettingsRoute: typeof UsersSettingsRoute
  UsersSubscriptionRoute: typeof UsersSubscriptionRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ChatRoute: ChatRouteWithChildren,
  TestgroundRoute: TestgroundRoute,
  AboutLazyRoute: AboutLazyRoute,
  CompanyLazyRoute: CompanyLazyRoute,
  FilesmanagerLazyRoute: FilesmanagerLazyRoute,
  ProjectsmanagerLazyRoute: ProjectsmanagerLazyRoute,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthPrivacyPolicyRoute: AuthPrivacyPolicyRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AuthServiceTermRoute: AuthServiceTermRoute,
  PlaygroundRoute: PlaygroundRouteWithChildren,
  ProjectsProjectIdRoute: ProjectsProjectIdRouteWithChildren,
  UsersAccountRoute: UsersAccountRoute,
  UsersBillingRoute: UsersBillingRoute,
  UsersSettingsRoute: UsersSettingsRoute,
  UsersSubscriptionRoute: UsersSubscriptionRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/chat",
        "/testground",
        "/about",
        "/company",
        "/files_manager",
        "/projects_manager",
        "/auth/forgot-password",
        "/auth/login",
        "/auth/privacy-policy",
        "/auth/register",
        "/auth/service-term",
        "/playground",
        "/projects/$projectId",
        "/users/account",
        "/users/billing",
        "/users/settings",
        "/users/subscription",
        "/projects/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/chat": {
      "filePath": "chat.tsx",
      "children": [
        "/chat/$sessionId"
      ]
    },
    "/testground": {
      "filePath": "testground.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/company": {
      "filePath": "company.lazy.tsx"
    },
    "/files_manager": {
      "filePath": "files_manager.lazy.tsx"
    },
    "/projects_manager": {
      "filePath": "projects_manager.lazy.tsx"
    },
    "/auth/forgot-password": {
      "filePath": "auth/forgot-password.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/privacy-policy": {
      "filePath": "auth/privacy-policy.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/auth/service-term": {
      "filePath": "auth/service-term.tsx"
    },
    "/chat/$sessionId": {
      "filePath": "chat.$sessionId.tsx",
      "parent": "/chat"
    },
    "/playground": {
      "filePath": "playground",
      "children": [
        "/playground/_layout",
        "/playground/markdown_editor",
        "/playground/task",
        "/playground/tiptap_editor",
        "/playground/"
      ]
    },
    "/playground/_layout": {
      "filePath": "playground/_layout.tsx",
      "parent": "/playground"
    },
    "/playground/markdown_editor": {
      "filePath": "playground/markdown_editor.tsx",
      "parent": "/playground"
    },
    "/playground/task": {
      "filePath": "playground/task.tsx",
      "parent": "/playground"
    },
    "/playground/tiptap_editor": {
      "filePath": "playground/tiptap_editor.tsx",
      "parent": "/playground"
    },
    "/projects/$projectId": {
      "filePath": "projects/$projectId.tsx",
      "children": [
        "/projects/$projectId/bid-writing",
        "/projects/$projectId/tender-analysis",
        "/projects/$projectId/",
        "/projects/$projectId/history/$historyId",
        "/projects/$projectId/history/",
        "/projects/$projectId/history/project/$historyId",
        "/projects/$projectId/history/stage/$historyId",
        "/projects/$projectId/history/task/$historyId"
      ]
    },
    "/users/account": {
      "filePath": "users/account.tsx"
    },
    "/users/billing": {
      "filePath": "users/billing.tsx"
    },
    "/users/settings": {
      "filePath": "users/settings.tsx"
    },
    "/users/subscription": {
      "filePath": "users/subscription.tsx"
    },
    "/playground/": {
      "filePath": "playground/index.tsx",
      "parent": "/playground"
    },
    "/projects/": {
      "filePath": "projects/index.tsx"
    },
    "/projects/$projectId/bid-writing": {
      "filePath": "projects/$projectId/bid-writing.tsx",
      "parent": "/projects/$projectId"
    },
    "/projects/$projectId/tender-analysis": {
      "filePath": "projects/$projectId/tender-analysis.tsx",
      "parent": "/projects/$projectId"
    },
    "/projects/$projectId/": {
      "filePath": "projects/$projectId/index.tsx",
      "parent": "/projects/$projectId"
    },
    "/projects/$projectId/history/$historyId": {
      "filePath": "projects/$projectId/history/$historyId.tsx",
      "parent": "/projects/$projectId"
    },
    "/projects/$projectId/history/": {
      "filePath": "projects/$projectId/history/index.tsx",
      "parent": "/projects/$projectId"
    },
    "/projects/$projectId/history/project/$historyId": {
      "filePath": "projects/$projectId/history/project/$historyId.tsx",
      "parent": "/projects/$projectId"
    },
    "/projects/$projectId/history/stage/$historyId": {
      "filePath": "projects/$projectId/history/stage/$historyId.tsx",
      "parent": "/projects/$projectId"
    },
    "/projects/$projectId/history/task/$historyId": {
      "filePath": "projects/$projectId/history/task/$historyId.tsx",
      "parent": "/projects/$projectId"
    }
  }
}
ROUTE_MANIFEST_END */
