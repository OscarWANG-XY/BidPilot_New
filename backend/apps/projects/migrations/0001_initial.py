# Generated by Django 5.1.4 on 2025-03-11 02:58

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='任务名称')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('type', models.CharField(choices=[('DOCUMENT_EXTRACTION', '提取文档信息'), ('DOCUMENT_TREE_BUILDING', '构建文档树'), ('AI_STRUCTURE_ANALYSIS', 'AI分析层级结构'), ('BIDDER_INSTRUCTION_ANALYSIS', '分析投标人须知'), ('SCORING_CRITERIA_ANALYSIS', '分析评分标准'), ('BID_DOCUMENT_COMPOSITION', '分析投标文件组成'), ('CHAPTER_WRITING', '章节撰写'), ('TECHNICAL_SOLUTION', '技术方案'), ('PRICE_PROPOSAL', '价格方案'), ('QUALIFICATION_DOCUMENTS', '资质文件'), ('DOCUMENT_REVIEW', '文档审核'), ('DOCUMENT_REVISION', '文档修订'), ('DOCUMENT_PRODUCTION', '文档生产'), ('OTHER', '其他')], default='OTHER', max_length=50, verbose_name='任务类型')),
                ('status', models.CharField(choices=[('PENDING', '待处理'), ('PROCESSING', '处理中'), ('COMPLETED', '已完成'), ('FAILED', '失败'), ('CONFIRMED', '已确认'), ('BLOCKED', '阻塞中')], default='PENDING', max_length=20, verbose_name='状态')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '基础任务',
                'verbose_name_plural': '基础任务',
            },
        ),
        migrations.CreateModel(
            name='DocxExtractionTask',
            fields=[
                ('basetask_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='projects.basetask')),
                ('extracted_elements', models.JSONField(blank=True, help_text='存储从文档中提取的结构化元素', null=True, verbose_name='提取的文档元素')),
                ('outline_analysis_result', models.JSONField(blank=True, help_text='存储大纲分析的结果', null=True, verbose_name='大纲分析结果')),
                ('improved_docx_elements', models.JSONField(blank=True, help_text='存储从经过初步大纲优化的结构化元素', null=True, verbose_name='初步大纲优化后的文档元素')),
            ],
            bases=('projects.basetask',),
        ),
        migrations.CreateModel(
            name='DocxTreeBuildTask',
            fields=[
                ('basetask_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='projects.basetask')),
                ('docxtree', models.JSONField(blank=True, help_text='存储从经过初步大纲优化的结构化元素', null=True, verbose_name='初步大纲优化后的文档元素')),
                ('more_subtitles', models.JSONField(blank=True, help_text='存储从经过初步大纲优化的结构化元素', null=True, verbose_name='更多子标题')),
            ],
            options={
                'verbose_name': '文档树构建任务',
                'verbose_name_plural': '文档树构建任务',
            },
            bases=('projects.basetask',),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=200, verbose_name='项目名称')),
                ('tenderee', models.CharField(max_length=200, verbose_name='招标单位')),
                ('bidder', models.CharField(blank=True, default='', max_length=200, verbose_name='投标单位')),
                ('project_type', models.CharField(choices=[('WELFARE', '企业福利'), ('FSD', '食材配送'), ('OTHER', '其他')], default='OTHER', max_length=20, verbose_name='项目类型')),
                ('bid_deadline', models.DateTimeField(blank=True, null=True, verbose_name='投标截止时间')),
                ('status', models.CharField(choices=[('IN_PROGRESS', '进行中'), ('COMPLETED', '已完成'), ('CANCELLED', '已取消')], default='IN_PROGRESS', max_length=20, verbose_name='项目状态')),
                ('is_urgent', models.BooleanField(default=False, verbose_name='是否紧急')),
                ('current_active_stage', models.CharField(choices=[('TENDER_ANALYSIS', '招标文件分析'), ('BID_WRITING', '投标文件编写')], default='TENDER_ANALYSIS', max_length=20, verbose_name='当前活动阶段')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('last_update_time', models.DateTimeField(auto_now=True, verbose_name='最后更新时间')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_projects', to=settings.AUTH_USER_MODEL, verbose_name='创建者')),
            ],
            options={
                'verbose_name': '项目',
                'verbose_name_plural': '项目',
                'ordering': ['-create_time'],
            },
        ),
        migrations.CreateModel(
            name='ProjectHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_stage', models.CharField(choices=[('TENDER_ANALYSIS', '招标文件分析'), ('BID_WRITING', '投标文件编写')], max_length=20, verbose_name='原阶段')),
                ('to_stage', models.CharField(choices=[('TENDER_ANALYSIS', '招标文件分析'), ('BID_WRITING', '投标文件编写')], max_length=20, verbose_name='新阶段')),
                ('from_status', models.CharField(blank=True, choices=[('NOT_STARTED', '未开始'), ('IN_PROGRESS', '进行中'), ('COMPLETED', '已完成'), ('BLOCKED', '阻塞中')], max_length=20, null=True)),
                ('to_status', models.CharField(blank=True, choices=[('NOT_STARTED', '未开始'), ('IN_PROGRESS', '进行中'), ('COMPLETED', '已完成'), ('BLOCKED', '阻塞中')], max_length=20, null=True)),
                ('operation_time', models.DateTimeField(auto_now_add=True, verbose_name='操作时间')),
                ('remarks', models.TextField(blank=True, verbose_name='备注')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_histories', to='projects.project', verbose_name='项目')),
            ],
            options={
                'verbose_name': '项目阶段历史',
                'verbose_name_plural': '项目阶段历史',
                'ordering': ['-operation_time'],
            },
        ),
        migrations.CreateModel(
            name='ProjectStage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stage_type', models.CharField(choices=[('TENDER_ANALYSIS', '招标文件分析'), ('BID_WRITING', '投标文件编写')], max_length=20, verbose_name='阶段类型')),
                ('name', models.CharField(max_length=100, verbose_name='阶段名称')),
                ('stage_status', models.CharField(choices=[('NOT_STARTED', '未开始'), ('IN_PROGRESS', '进行中'), ('COMPLETED', '已完成'), ('BLOCKED', '阻塞中')], default='NOT_STARTED', max_length=20, verbose_name='状态')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('file_id', models.CharField(blank=True, max_length=100, verbose_name='文件ID')),
                ('progress', models.IntegerField(default=0, verbose_name='进度')),
                ('remarks', models.TextField(blank=True, verbose_name='备注')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='元数据')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stages', to='projects.project', verbose_name='项目')),
            ],
            options={
                'verbose_name': '项目阶段',
                'verbose_name_plural': '项目阶段',
            },
        ),
        migrations.AddField(
            model_name='basetask',
            name='stage',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='projects.projectstage', verbose_name='所属阶段'),
        ),
        migrations.AddIndex(
            model_name='projectstage',
            index=models.Index(fields=['project', 'stage_type'], name='projects_pr_project_4db5a0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='projectstage',
            unique_together={('project', 'stage_type')},
        ),
    ]
