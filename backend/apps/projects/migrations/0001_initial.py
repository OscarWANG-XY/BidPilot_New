# Generated by Django 5.1.4 on 2025-06-20 04:00

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "project_name",
                    models.CharField(max_length=200, verbose_name="项目名称"),
                ),
                ("tenderee", models.CharField(max_length=200, verbose_name="招标单位")),
                (
                    "bidder",
                    models.CharField(
                        blank=True, default="", max_length=200, verbose_name="投标单位"
                    ),
                ),
                (
                    "tender_file",
                    models.FileField(
                        blank=True, null=True, upload_to="uploads/%Y/%m/%d/"
                    ),
                ),
                (
                    "project_type",
                    models.CharField(
                        choices=[
                            ("WELFARE", "企业福利"),
                            ("FSD", "食材配送"),
                            ("OTHER", "其他"),
                        ],
                        default="OTHER",
                        max_length=20,
                        verbose_name="项目类型",
                    ),
                ),
                (
                    "bid_deadline",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="投标截止时间"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("IN_PROGRESS", "进行中"),
                            ("COMPLETED", "已完成"),
                            ("CANCELLED", "已取消"),
                        ],
                        default="IN_PROGRESS",
                        max_length=20,
                        verbose_name="项目状态",
                    ),
                ),
                (
                    "starred",
                    models.BooleanField(default=False, verbose_name="是否标星"),
                ),
                (
                    "current_active_stage",
                    models.CharField(
                        choices=[
                            ("TENDER_ANALYSIS", "招标文件分析"),
                            ("BID_WRITING", "投标文件编写"),
                        ],
                        default="TENDER_ANALYSIS",
                        max_length=20,
                        verbose_name="当前活动阶段",
                    ),
                ),
                (
                    "create_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "last_update_time",
                    models.DateTimeField(auto_now=True, verbose_name="最后更新时间"),
                ),
                (
                    "tender_file_extraction",
                    models.JSONField(
                        blank=True,
                        help_text="存储招标文件提取的内容",
                        null=True,
                        verbose_name="招标文件提取的内容",
                    ),
                ),
                (
                    "outline_L1",
                    models.JSONField(
                        blank=True,
                        help_text="存储大纲L1",
                        null=True,
                        verbose_name="大纲L1",
                    ),
                ),
                (
                    "index_path_map_L1",
                    models.JSONField(
                        blank=True,
                        help_text="存储大纲L1索引路径映射",
                        null=True,
                        verbose_name="大纲L1索引路径映射",
                    ),
                ),
                (
                    "tender_file_extraction_L1",
                    models.JSONField(
                        blank=True,
                        help_text="存储招标文件更新L1",
                        null=True,
                        verbose_name="招标文件更新L1",
                    ),
                ),
                (
                    "outline_L2",
                    models.JSONField(
                        blank=True,
                        help_text="存储大纲L2",
                        null=True,
                        verbose_name="大纲L2",
                    ),
                ),
                (
                    "index_path_map_L2",
                    models.JSONField(
                        blank=True,
                        help_text="存储大纲L2索引路径映射",
                        null=True,
                        verbose_name="大纲L2索引路径映射",
                    ),
                ),
                (
                    "tender_file_extraction_L2",
                    models.JSONField(
                        blank=True,
                        help_text="存储招标文件更新L2",
                        null=True,
                        verbose_name="招标文件更新L2",
                    ),
                ),
                (
                    "outline_L3",
                    models.JSONField(
                        blank=True,
                        help_text="存储大纲L3",
                        null=True,
                        verbose_name="大纲L3",
                    ),
                ),
                (
                    "index_path_map_L3",
                    models.JSONField(
                        blank=True,
                        help_text="存储大纲L3索引路径映射",
                        null=True,
                        verbose_name="大纲L3索引路径映射",
                    ),
                ),
                (
                    "tender_file_extraction_L3",
                    models.JSONField(
                        blank=True,
                        help_text="存储招标文件更新L3",
                        null=True,
                        verbose_name="招标文件更新L3",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_projects",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="创建者",
                    ),
                ),
            ],
            options={
                "verbose_name": "项目",
                "verbose_name_plural": "项目",
                "ordering": ["-create_time"],
            },
        ),
        migrations.CreateModel(
            name="ProjectStage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "stage_type",
                    models.CharField(
                        choices=[
                            ("TENDER_ANALYSIS", "招标文件分析"),
                            ("BID_WRITING", "投标文件编写"),
                        ],
                        max_length=20,
                        verbose_name="阶段类型",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="阶段名称")),
                (
                    "stage_status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "未开始"),
                            ("IN_PROGRESS", "进行中"),
                            ("COMPLETED", "已完成"),
                            ("BLOCKED", "阻塞中"),
                        ],
                        default="NOT_STARTED",
                        max_length=20,
                        verbose_name="状态",
                    ),
                ),
                ("description", models.TextField(blank=True, verbose_name="描述")),
                ("progress", models.IntegerField(default=0, verbose_name="进度")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "metadata",
                    models.JSONField(blank=True, default=dict, verbose_name="元数据"),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stages",
                        to="projects.project",
                        verbose_name="项目",
                    ),
                ),
            ],
            options={
                "verbose_name": "项目阶段",
                "verbose_name_plural": "项目阶段",
            },
        ),
        migrations.CreateModel(
            name="StageChangeHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "operation_id",
                    models.UUIDField(
                        db_index=True,
                        default=uuid.uuid4,
                        help_text="同一操作中的多个字段变更共享相同的操作ID",
                        verbose_name="操作ID",
                    ),
                ),
                (
                    "field_name",
                    models.CharField(max_length=100, verbose_name="变更字段"),
                ),
                (
                    "old_value",
                    models.TextField(blank=True, null=True, verbose_name="旧值"),
                ),
                (
                    "new_value",
                    models.TextField(blank=True, null=True, verbose_name="新值"),
                ),
                (
                    "changed_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="变更时间"),
                ),
                ("remarks", models.TextField(blank=True, verbose_name="备注")),
                (
                    "changed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="stage_changes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="操作人",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stage_change_histories",
                        to="projects.project",
                        verbose_name="项目",
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="change_histories",
                        to="projects.projectstage",
                        verbose_name="阶段",
                    ),
                ),
            ],
            options={
                "verbose_name": "阶段变更历史",
                "verbose_name_plural": "阶段变更历史",
                "ordering": ["-changed_at"],
            },
        ),
        migrations.CreateModel(
            name="StructuringAgentDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("project_id", models.CharField(db_index=True, max_length=100)),
                ("document_type", models.CharField(max_length=20)),
                ("content", models.JSONField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "文档结构化内容",
                "verbose_name_plural": "文档结构化内容",
                "db_table": "structuring_agent_document",
                "indexes": [
                    models.Index(
                        fields=["project_id", "document_type"],
                        name="structuring_project_082e01_idx",
                    )
                ],
                "unique_together": {("project_id", "document_type")},
            },
        ),
        migrations.CreateModel(
            name="StructuringAgentState",
            fields=[
                (
                    "project_id",
                    models.CharField(
                        db_index=True, max_length=100, primary_key=True, serialize=False
                    ),
                ),
                ("state", models.CharField(max_length=50)),
                ("state_history", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "文档结构化状态",
                "verbose_name_plural": "文档结构化状态",
                "db_table": "structuring_agent_state",
                "indexes": [
                    models.Index(
                        fields=["project_id"], name="structuring_project_fa393d_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="任务名称")),
                ("description", models.TextField(blank=True, verbose_name="描述")),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("UPLOAD_TENDER_FILE", "上传招标文件"),
                            ("DOCX_EXTRACTION_TASK", "提取文档信息"),
                            ("OUTLINE_ANALYSIS_TASK", "分析文档结构"),
                            ("OTHER", "其他"),
                        ],
                        default="OTHER",
                        max_length=50,
                        verbose_name="任务类型",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "未开始"),
                            ("CONFIGURING", "配置中"),
                            ("PROCESSING", "处理中"),
                            ("REVIEWING", "审核中"),
                            ("COMPLETED", "完成"),
                            ("FAILED", "失败"),
                        ],
                        default="NOT_STARTED",
                        max_length=20,
                        verbose_name="状态",
                    ),
                ),
                ("task_level", models.IntegerField(default=0, verbose_name="任务层级")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "lock_status",
                    models.CharField(
                        choices=[("LOCKED", "锁定"), ("UNLOCKED", "解锁")],
                        default="UNLOCKED",
                        max_length=20,
                        verbose_name="锁定状态",
                    ),
                ),
                (
                    "docx_tiptap",
                    models.JSONField(
                        blank=True,
                        help_text="存储tiptap内容",
                        null=True,
                        verbose_name="tiptap内容",
                    ),
                ),
                (
                    "context",
                    models.JSONField(
                        blank=True,
                        help_text="存储上下文",
                        null=True,
                        verbose_name="上下文",
                    ),
                ),
                (
                    "context_description",
                    models.TextField(blank=True, verbose_name="上下文描述"),
                ),
                (
                    "context_tokens",
                    models.IntegerField(
                        blank=True,
                        help_text="存储上下文token",
                        null=True,
                        verbose_name="上下文token",
                    ),
                ),
                (
                    "instruction",
                    models.JSONField(
                        blank=True, help_text="存储指令", null=True, verbose_name="指令"
                    ),
                ),
                (
                    "instruction_description",
                    models.TextField(blank=True, verbose_name="指令描述"),
                ),
                (
                    "instruction_tokens",
                    models.IntegerField(
                        blank=True,
                        help_text="存储指令token",
                        null=True,
                        verbose_name="指令token",
                    ),
                ),
                (
                    "supplement",
                    models.JSONField(
                        blank=True,
                        help_text="存储补充信息",
                        null=True,
                        verbose_name="补充信息",
                    ),
                ),
                (
                    "supplement_description",
                    models.TextField(blank=True, verbose_name="补充描述"),
                ),
                (
                    "supplement_tokens",
                    models.IntegerField(
                        blank=True,
                        help_text="存储补充token",
                        null=True,
                        verbose_name="补充token",
                    ),
                ),
                (
                    "output_format",
                    models.JSONField(
                        blank=True,
                        help_text="存储输出格式",
                        null=True,
                        verbose_name="输出格式",
                    ),
                ),
                (
                    "output_format_description",
                    models.TextField(blank=True, verbose_name="输出格式描述"),
                ),
                (
                    "output_format_tokens",
                    models.IntegerField(
                        blank=True,
                        help_text="存储输出格式token",
                        null=True,
                        verbose_name="输出格式token",
                    ),
                ),
                (
                    "prompt_template",
                    models.JSONField(
                        blank=True,
                        help_text="存储prompt模板",
                        null=True,
                        verbose_name="prompt模板",
                    ),
                ),
                (
                    "prompt_template_description",
                    models.TextField(blank=True, verbose_name="prompt模板描述"),
                ),
                (
                    "prompt_template_tokens",
                    models.IntegerField(
                        blank=True,
                        help_text="存储prompt模板token",
                        null=True,
                        verbose_name="prompt模板token",
                    ),
                ),
                (
                    "index_path_map",
                    models.JSONField(
                        blank=True,
                        help_text="存储索引路径映射",
                        null=True,
                        verbose_name="索引路径映射",
                    ),
                ),
                (
                    "index_path_map_description",
                    models.TextField(blank=True, verbose_name="索引路径映射描述"),
                ),
                (
                    "llm_config",
                    models.JSONField(
                        blank=True,
                        help_text="存储模型配置",
                        null=True,
                        verbose_name="模型配置",
                    ),
                ),
                (
                    "llm_config_description",
                    models.TextField(blank=True, verbose_name="模型配置描述"),
                ),
                (
                    "result_raw",
                    models.JSONField(
                        blank=True,
                        help_text="存储结果原始数据",
                        null=True,
                        verbose_name="结果原始数据",
                    ),
                ),
                (
                    "final_result",
                    models.JSONField(
                        blank=True,
                        help_text="存储最终结果",
                        null=True,
                        verbose_name="最终结果",
                    ),
                ),
                (
                    "final_result_description",
                    models.TextField(blank=True, verbose_name="最终结果描述"),
                ),
                (
                    "task_started_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="存储任务开始时间",
                        null=True,
                        verbose_name="任务开始时间",
                    ),
                ),
                (
                    "task_completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="存储任务完成时间",
                        null=True,
                        verbose_name="任务完成时间",
                    ),
                ),
                (
                    "analysis_duration",
                    models.IntegerField(
                        blank=True,
                        help_text="存储分析时长",
                        null=True,
                        verbose_name="分析时长",
                    ),
                ),
                (
                    "in_tokens",
                    models.IntegerField(
                        blank=True,
                        help_text="存储输入token",
                        null=True,
                        verbose_name="输入token",
                    ),
                ),
                (
                    "out_tokens",
                    models.IntegerField(
                        blank=True,
                        help_text="存储输出token",
                        null=True,
                        verbose_name="输出token",
                    ),
                ),
                (
                    "total_tokens",
                    models.IntegerField(
                        blank=True,
                        help_text="存储总token",
                        null=True,
                        verbose_name="总token",
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="存储错误信息",
                        null=True,
                        verbose_name="错误信息",
                    ),
                ),
                (
                    "data_input",
                    models.JSONField(
                        blank=True,
                        help_text="存储数据输入",
                        null=True,
                        verbose_name="数据输入",
                    ),
                ),
                (
                    "additional_input",
                    models.JSONField(
                        blank=True,
                        help_text="存储补充输入",
                        null=True,
                        verbose_name="补充输入",
                    ),
                ),
                (
                    "result_Tiptapjson",
                    models.JSONField(
                        blank=True,
                        help_text="存储结果Tiptap JSON",
                        null=True,
                        verbose_name="结果Tiptap JSON",
                    ),
                ),
                (
                    "result_markdown",
                    models.TextField(
                        blank=True,
                        help_text="存储结果Markdown",
                        null=True,
                        verbose_name="结果Markdown",
                    ),
                ),
                (
                    "result_html",
                    models.TextField(
                        blank=True,
                        help_text="存储结果HTML",
                        null=True,
                        verbose_name="结果HTML",
                    ),
                ),
                (
                    "dependencies",
                    models.ManyToManyField(
                        blank=True, related_name="dependents", to="projects.task"
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="projects.projectstage",
                        verbose_name="所属阶段",
                    ),
                ),
            ],
            options={
                "verbose_name": "任务",
                "verbose_name_plural": "任务",
            },
        ),
        migrations.CreateModel(
            name="TaskChangeHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "operation_id",
                    models.UUIDField(
                        db_index=True,
                        default=uuid.uuid4,
                        help_text="同一操作中的多个字段变更共享相同的操作ID",
                        verbose_name="操作ID",
                    ),
                ),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("UPLOAD_TENDER_FILE", "上传招标文件"),
                            ("DOCX_EXTRACTION_TASK", "提取文档信息"),
                            ("OUTLINE_ANALYSIS_TASK", "分析文档结构"),
                            ("OTHER", "其他"),
                        ],
                        default="OTHER",
                        max_length=50,
                        verbose_name="任务类型",
                    ),
                ),
                (
                    "field_name",
                    models.CharField(max_length=100, verbose_name="变更字段"),
                ),
                (
                    "old_value",
                    models.TextField(blank=True, null=True, verbose_name="旧值"),
                ),
                (
                    "new_value",
                    models.TextField(blank=True, null=True, verbose_name="新值"),
                ),
                (
                    "is_complex_field",
                    models.BooleanField(default=False, verbose_name="是否复杂字段"),
                ),
                (
                    "change_summary",
                    models.TextField(blank=True, null=True, verbose_name="变更摘要"),
                ),
                (
                    "changed_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="变更时间"),
                ),
                ("remarks", models.TextField(blank=True, verbose_name="备注")),
                (
                    "changed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="task_changes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="操作人",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_change_histories",
                        to="projects.project",
                        verbose_name="项目",
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_change_histories",
                        to="projects.projectstage",
                        verbose_name="阶段",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="change_histories",
                        to="projects.task",
                        verbose_name="任务",
                    ),
                ),
            ],
            options={
                "verbose_name": "任务变更历史",
                "verbose_name_plural": "任务变更历史",
                "ordering": ["-changed_at"],
            },
        ),
        migrations.CreateModel(
            name="ProjectChangeHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "operation_id",
                    models.UUIDField(
                        db_index=True,
                        default=uuid.uuid4,
                        help_text="同一操作中的多个字段变更共享相同的操作ID",
                        verbose_name="操作ID",
                    ),
                ),
                (
                    "field_name",
                    models.CharField(max_length=100, verbose_name="变更字段"),
                ),
                (
                    "old_value",
                    models.TextField(blank=True, null=True, verbose_name="旧值"),
                ),
                (
                    "new_value",
                    models.TextField(blank=True, null=True, verbose_name="新值"),
                ),
                (
                    "changed_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="变更时间"),
                ),
                ("remarks", models.TextField(blank=True, verbose_name="备注")),
                (
                    "changed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="project_changes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="操作人",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="change_histories",
                        to="projects.project",
                        verbose_name="项目",
                    ),
                ),
            ],
            options={
                "verbose_name": "项目变更历史",
                "verbose_name_plural": "项目变更历史",
                "ordering": ["-changed_at"],
                "indexes": [
                    models.Index(
                        fields=["project", "changed_at"],
                        name="projects_pr_project_285a64_idx",
                    ),
                    models.Index(
                        fields=["field_name"], name="projects_pr_field_n_c50492_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="projectstage",
            index=models.Index(
                fields=["project", "stage_type"], name="projects_pr_project_4db5a0_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="projectstage",
            unique_together={("project", "stage_type")},
        ),
        migrations.AddIndex(
            model_name="stagechangehistory",
            index=models.Index(
                fields=["stage", "changed_at"], name="projects_st_stage_i_a1ff70_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="stagechangehistory",
            index=models.Index(
                fields=["project", "changed_at"], name="projects_st_project_3eb6c9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="stagechangehistory",
            index=models.Index(
                fields=["field_name"], name="projects_st_field_n_c2c213_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["stage", "type"], name="projects_ta_stage_i_bf243b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(fields=["status"], name="projects_ta_status_d6b74c_idx"),
        ),
        migrations.AddIndex(
            model_name="taskchangehistory",
            index=models.Index(
                fields=["task", "changed_at"], name="projects_ta_task_id_5b5cb2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskchangehistory",
            index=models.Index(
                fields=["stage", "changed_at"], name="projects_ta_stage_i_ff1fd2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskchangehistory",
            index=models.Index(
                fields=["project", "changed_at"], name="projects_ta_project_d90e0f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskchangehistory",
            index=models.Index(
                fields=["task_type"], name="projects_ta_task_ty_78a373_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskchangehistory",
            index=models.Index(
                fields=["field_name"], name="projects_ta_field_n_2eb07c_idx"
            ),
        ),
    ]
