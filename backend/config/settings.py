"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os, sys 
from pathlib import Path
from dotenv import load_dotenv
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR 指向backend目录
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env file from the parent directory of backend
# BASE_DIR.parent / '.env' 构建了指向父目录中 .env 文件的完整路径
load_dotenv(BASE_DIR.parent / '.env')


#sys.path.insert(0,str(BASE_DIR))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-eue96xem5j9v0-sj$@blb(bh56es614w@_o7gmq$q15!xfnjfk')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True').lower() == 'true'

# 根据环境设置允许的主机
if DEBUG:
    ALLOWED_HOSTS = ['115.159.6.83', 'localhost', '127.0.0.1', 'testserver', '*']
else:
    ALLOWED_HOSTS = ['115.159.6.83', 'localhost', '127.0.0.1', 'zzz-tech.cn', 'www.zzz-tech.cn', 'backend']

# -----------------------  CORS设置 （与前端连接的必要配置）--------------------------------------
if DEBUG:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",  # React 开发服务器
        "http://localhost:5173",  # Vite 开发服务器
        "http://115.159.6.83:5173",  # Vite 开发服务器
        "http://115.159.6.83:3000",  # React 开发服务器 
    ]
    CORS_ALLOW_ALL_ORIGINS = True  # 开发环境允许所有来源
else:
    CORS_ALLOWED_ORIGINS = [
        "http://115.159.6.83:5173",  # Vite 开发服务器
        "https://zzz-tech.cn", 
        "https://www.zzz-tech.cn",
        "http://localhost:8000",
        "http://127.0.0.1:8000"        
    ]
    CORS_ALLOW_ALL_ORIGINS = False  # 注意：生产环境中应设为False

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# CSRF设置
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_HTTPONLY = False
CSRF_USE_SESSIONS = False
CSRF_COOKIE_SAMESITE = None




# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'storages',  # 用于存储文件对象
    'channels',
    'apps.authentication',
    'apps.files',
    'apps.projects',
    'apps.internal_server',
    #'apps.doc_analysis',
    #'apps.chat',
    'apps.testground',
    'apps.subscription',
    'django_filters',  # 用于过滤
    'drf_spectacular',  # 用于生成OPENAPI文档
    'rest_framework_simplejwt.token_blacklist', # 用于管理JWT令牌的黑名单 for logout


]



# ----------------------- 腾讯COS文件存储配置 (Boto3+Storage) 暂时弃用 --------------------------------------
#DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"  # 使用Boto3+Storage (推荐)
DEFAULT_FILE_STORAGE = 'apps.files.storage.COSStorage'  # 使用COSStorage
#DEFAULT_FILE_STORAGE = 'apps.files.storage.AsyncCOSStorage'  # 使用AsyncCOSStorage
AWS_ACCESS_KEY_ID = os.getenv('TENCENT_COS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('TENCENT_COS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = 'bidpilot-1332405885'
AWS_S3_REGION_NAME = 'ap-shanghai'  # 例如：ap-beijing

# f"https://{COS_BUCKET_NAME}.cos.{COS_REGION}.myqcloud.com"
AWS_S3_ENDPOINT_URL = 'https://bidpilot-1332405885.cos.ap-shanghai.myqcloud.com'
AWS_S3_ADDRESSING_STYLE = 'path' # 路径风格
AWS_QUERYSTRING_AUTH = False  # 不加签名，直接公开 URL 访问
AWS_DEFAULT_ACL = 'public-read'  # 设置默认的访问控制级别为公开读取

# AWS_S3_CUSTOM_DOMAIN 主要用于生成文件的访问 URL，不影响存储路径。它决定了通过 file.url 获取到的 URL 的域名部分
AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.cos.{AWS_S3_REGION_NAME}.myqcloud.com"
AWS_S3_FILE_OVERWRITE = False  # 不覆盖同名文件
AWS_LOCATION = ''  # 这会生成类似 uploads/2025/01/31/ 的路径


# 腾讯云短信
# 腾讯云短信服务配置
TENCENT_CLOUD_SECRET_ID = os.environ.get('TENCENT_CLOUD_SECRET_ID', '')
TENCENT_CLOUD_SECRET_KEY = os.environ.get('TENCENT_CLOUD_SECRET_KEY', '')
TENCENT_SMS_REGION = os.environ.get('TENCENT_SMS_REGION', 'ap-nanjing')  # 默认使用南京区域
TENCENT_SMS_SDK_APP_ID = os.environ.get('TENCENT_SMS_SDK_APP_ID', '1400962213') 
TENCENT_SMS_TEMPLATE_ID = os.environ.get('TENCENT_SMS_TEMPLATE_ID', '2422430')
TENCENT_SMS_SIGN_NAME = os.environ.get('TENCENT_SMS_SIGN_NAME', '执智者上海科技有限公司')



MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # 需要放在最前面
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',  # 会话认证，项目初始化时就存在
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # 认证中间件（JWT认证也要用到）
    # 'apps.authentication.middlewares.TestUserMiddleware',  # 测试用户中间件
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.projects.middlewares.APILoggingMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            # 添加你的模板目录
            os.path.join(BASE_DIR, 'apps/testground/templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'



# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# 数据库配置
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # 数据库引擎
        'NAME': os.environ.get('POSTGRES_DB', 'bidpilot_new'),  # 数据库名称
        'USER': os.environ.get('POSTGRES_USER', 'postgres'),  # 数据库用户
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', '123456'),  # 数据库密码\
        'HOST': os.environ.get('POSTGRES_HOST', 'localhost'),  # 数据库主机
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),  # 数据库端口
        'CONN_MAX_AGE': 0,  # 对异步连接很重要
        'OPTIONS': {
            'client_encoding': 'UTF8',  # 确保客户端编码为 UTF-8
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'   # 语言 英文是en-us，中文是zh-hans

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'  # 收集静态文件的目录

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ------------------------------ DRF 配置 用于生成OPENAPI文档 ------------------------------
# DRF 配置
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication', #JWT认证
    ),
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
}




# Spectacular 设置
SPECTACULAR_SETTINGS = {
    'TITLE': 'BidPilot API',
    'DESCRIPTION': 'BidPilot 后端 API 文档',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'TAGS': [
        {'name': 'auth', 'description': '认证相关接口'},
    ],
}
# ----------------------------------------------------------------------------------------------









# ----------------------------- Tiptap Service Configuration -----------------------------
TIPTAP_SERVICE_URL = os.getenv('TIPTAP_SERVICE_URL', 'http://localhost:3001')  # 使用 Docker 服务名称
TIPTAP_SERVICE_TIMEOUT = os.getenv('TIPTAP_SERVICE_TIMEOUT', 30)  # seconds


# ----------------------------- Bidlyzer Service Configuration -----------------------------
BIDLYZER_SERVICE_URL = os.getenv('BIDLYZER_SERVICE_URL', 'http://localhost:8001')  # 使用 Docker 服务名称




# ------------------------------ Celery配置 ------------------------------

# Celery Base Configuration
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# 确保这些应用在所有环境中都可用
INSTALLED_APPS += [
    'django_celery_results',
    'django_celery_beat',
]

# ----------------------------- Redis Configuration -----------------------------
REDIS_HOST = os.getenv('REDIS_HOST', 'localhost')
REDIS_PORT = int(os.getenv('REDIS_PORT', 6379))
REDIS_DB = int(os.getenv('REDIS_DB', 0))
REDIS_PASSWORD = os.getenv('REDIS_PASSWORD', None)

# Redis URL
REDIS_URL = f"redis://{':' + REDIS_PASSWORD + '@' if REDIS_PASSWORD else ''}{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"


# Configure Django Cache with Redis
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "IGNORE_EXCEPTIONS": True,
        }
    }
}

# ------------------------------ Channels Configuration ------------------------------
# 添加 Channels 配置
ASGI_APPLICATION = 'config.asgi.application'

# 配置 Channel Layers (使用 Redis 作为后端)
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [REDIS_URL],
        },
    },
}

# JWT 时效配置
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),  # 保持30分钟
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),    # 保持1天
    'SIGNING_KEY': os.getenv('JWT_SIGNING_KEY', SECRET_KEY),  # 显式使用环境变量中的密钥
    'ALGORITHM': os.getenv('JWT_ALGORITHM', 'HS256'),  # 明确指定算法
    'AUTH_HEADER_TYPES': ('Bearer',),  # 确保使用Bearer认证头
    'USER_ID_FIELD': 'id',  # 确保使用id作为用户标识
    'USER_ID_CLAIM': 'user_id',  # 确保user_id作为JWT中的用户标识声明
}

# 自定义用户模型
AUTH_USER_MODEL = 'authentication.User'

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'level': 'DEBUG', 
        },
    },
    'loggers': {
        '': {  # Root logger
            'handlers': ['console'],
            'level': 'INFO',
        },
        'apps.authentication': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'apps.files': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'apps.projects': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'apps.projects.middlewares': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}



