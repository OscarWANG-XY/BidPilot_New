FROM node:20-alpine as builder

# 设置工作目录
WORKDIR /app

# 安装pnpm
RUN npm install -g pnpm@10.6.5

# 复制package.json和pnpm-lock.yaml（仅依赖文件）
COPY frontend/package.json frontend/pnpm-lock.yaml ./

# 复制.npmrc以处理tiptap pro扩展
COPY frontend/.npmrc ./

# 安装依赖 - 使用常规缓存方式而非挂载缓存
RUN pnpm install --frozen-lockfile

# 复制前端源代码（注意：在安装依赖后再复制源代码，以利用缓存）
COPY frontend/ ./

# 构建生产版本
RUN pnpm build


# 生产环境阶段 - 使用常规 alpine 镜像，确保兼容性
FROM nginx:alpine

# 创建/run目录并设置权限
RUN mkdir -p /run && chmod 755 /run

# 创建非root用户
RUN adduser -D -H -u 1001 -s /sbin/nologin nginxuser

# 复制构建产物到nginx目录
COPY --from=builder /app/dist /usr/share/nginx/html

# 复制nginx配置
COPY docker/nginx/frontend.conf /etc/nginx/conf.d/default.conf

# 添加安全增强的nginx配置
RUN echo 'server_tokens off;' > /etc/nginx/conf.d/security.conf

# 设置目录权限
RUN chown -R nginxuser:nginxuser /usr/share/nginx/html && \
    chown -R nginxuser:nginxuser /var/cache/nginx && \
    chown -R nginxuser:nginxuser /var/log/nginx && \
    chown -R nginxuser:nginxuser /run && \
    chmod -R 755 /usr/share/nginx/html

# 清理不必要的文件，减小镜像大小
RUN rm -rf /var/cache/apk/* && \
    rm -rf /tmp/*

# 切换到非root用户
USER nginxuser

# 添加健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget -q -O /dev/null http://localhost:80/ || exit 1

# 暴露端口
EXPOSE 80

# 启动nginx
CMD ["nginx", "-g", "daemon off;"] 