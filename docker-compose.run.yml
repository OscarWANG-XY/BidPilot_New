# version: '3.8'

services:
  # 数据库服务
  db:
    image: postgres:14.17
    container_name: bidpilot_prod_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env.prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    networks:
      - bidpilot_network

  # Redis服务
  redis:
    image: redis:7.2-alpine
    container_name: bidpilot_prod_redis
    command: 
      redis-server 
      --requirepass "redis_123456" 
      --appendonly yes
    volumes:
      - redis_data:/data
    env_file:
      - .env.prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    networks:
      - bidpilot_network

  # Celery worker服务
  celery_worker:
    image: ccr.ccs.tencentyun.com/bidpilot/bidpilot-celery-worker:latest
    container_name: bidpilot_prod_celery_worker
    depends_on:
      - db
      - redis
    volumes:
      - celery_worker_logs:/app/logs
    env_file:
      - .env.prod
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_123456
      - CELERY_BROKER_URL=redis://:redis_123456@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_123456@redis:6379/0
    command: celery -A config worker -l info --concurrency=4
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    networks:
      - bidpilot_network

  # 后端Django服务
  backend:
    image: ccr.ccs.tencentyun.com/bidpilot/bidpilot-backend:latest
    container_name: bidpilot_prod_backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - backend_logs:/app/logs
    env_file:
      - .env.prod
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DJANGO_DEBUG=False
      - ALLOWED_HOSTS=zzz-tech.cn,www.zzz-tech.cn,localhost,127.0.0.1,backend
      - REDIS_PASSWORD=redis_123456
      - CELERY_BROKER_URL=redis://:redis_123456@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_123456@redis:6379/0
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    networks:
      - bidpilot_network

  # 前端服务
  frontend:
    image: ccr.ccs.tencentyun.com/bidpilot/bidpilot-frontend:latest
    container_name: bidpilot_prod_frontend
    volumes:
      - frontend_build:/usr/share/nginx/html
    env_file:
      - .env.prod
    environment:
      - REACT_APP_API_URL=https://zzz-tech.cn/api
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    networks:
      - bidpilot_network

  # Tiptap服务
  tiptap:
    image: ccr.ccs.tencentyun.com/bidpilot/bidpilot-tiptap:latest
    container_name: bidpilot_prod_tiptap
    volumes:
      - tiptap_logs:/app/logs
    env_file:
      - .env.prod
    environment:
      - PORT=3001
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    networks:
      - bidpilot_network

  # Nginx代理服务
  nginx:
    image: ccr.ccs.tencentyun.com/bidpilot/bidpilot-nginx:latest
    container_name: bidpilot_prod_nginx
    user: root
    volumes:
      - ./docker/nginx/default.prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - static_volume:/app/static
      - media_volume:/app/media
      - frontend_build:/usr/share/nginx/html
      - nginx_logs:/var/log/nginx
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    # command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    depends_on:
      - backend
      - frontend
      - tiptap
    ports:
      - "80:80"
      - "443:443"
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    networks:
      - bidpilot_network

  # 新增Certbot容器
  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - bidpilot_network


networks:
  bidpilot_network:
    name: bidpilot_prod_network
    driver: bridge

volumes:
  postgres_data:
    name: bidpilot_prod_postgres_data
  redis_data:
    name: bidpilot_prod_redis_data
  static_volume:
    name: bidpilot_prod_static_volume
  media_volume:
    name: bidpilot_prod_media_volume
  celery_worker_logs:
    name: bidpilot_prod_celery_worker_logs
  backend_logs:
    name: bidpilot_prod_backend_logs
  tiptap_logs:
    name: bidpilot_prod_tiptap_logs
  nginx_logs:
    name: bidpilot_prod_nginx_logs
  frontend_build:
    name: bidpilot_prod_frontend_build 